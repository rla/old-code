[terminating-characters '(#\, #\; #\( #\) #\[ #\] #\{ #\} #\' #\")]

(define (sym-is-readable? str)
  (let ([len (##sys#size str)])
    (and (fx> len 0)
         (if (eq? len 1)
             (case (##core#inline "C_subchar" str 0)
               ((#\. #\#) #f)
               (else #t) ) )
         (not (##core#inline "C_substring_compare" "#!" str 0 0 2))
         (let loop ((i (fx- len 1)))
              (if (eq? i 0)
                  (let ((c (##core#inline "C_subchar" str 0)))
                    (cond ((or (char-numeric? c)
                               (eq? c #\+)
                               (eq? c #\-)
                               (eq? c #\.) )
                           (not (##sys#string->number str)) )
                          ((specialchar? c) #f)
                          (else #t) ) )
                (let ([c (##core#inline "C_subchar" str i)])
                  (and (or csp (not (char-upper-case? c)))
                       (not (specialchar? c))
                       (loop (fx- i 1)) ) ) ) ) ) ) )

(let ([str (##sys#symbol->qualified-string x)])
  (if (or (not readable) (sym-is-readable? str))
      (outstr port str)
    (outreadablesym port str) ) )

	(define (outreadablesym port str)
	  (let ([len (##sys#size str)])
	    (outchr port #\|)
	    (let loop ([i 0])
	      (if (fx>= i len)
		  (outchr port #\|)
		  (let ([c (##core#inline "C_subchar" str i)])
		    (when (or (eq? c #\|) (eq? c #\\)) (outchr port #\\))
		    (outchr port c)
		    (loop (fx+ i 1)) ) ) ) ) )
