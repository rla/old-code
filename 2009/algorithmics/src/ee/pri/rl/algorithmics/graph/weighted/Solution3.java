package ee.pri.rl.algorithmics.graph.weighted;

import ee.pri.rl.algorithmics.graph.matrix.Matrix;
import ee.pri.rl.algorithmics.graph.matrix.op.DoubleAddOperation;
import ee.pri.rl.algorithmics.graph.matrix.op.DoubleMultOperation;
import ee.pri.rl.algorithmics.graph.matrix.op.Operation;

/**
 * <pre>
 * M^k, k = 1
 * 0.0	0.95	0.05	0.0	0.0
 * 0.0	0.0	0.0	0.7	0.3
 * 0.0	0.0	0.0	0.0	1.0
 * 1.0	0.0	0.0	0.0	0.0
 * 0.8	0.0	0.0	0.2	0.0
 * 
 * M^k, k = 10
 * 0.17496828899999994	0.7715579251499998	0.04060831184999999	0.011361658999999998	0.0015038149999999995
 * 0.011720979999999999	0.161262519	0.008487501	0.5444120138999998	0.27411698609999996
 * 0.028595599999999992	0.26040962999999995	0.013705769999999997	0.4639979479999998	0.23329105199999997
 * 0.8121662369999999	0.004264549999999998	2.2444999999999998E-4	0.141462393	0.04188236999999999
 * 0.6506307895999999	0.027165819999999993	0.0014297799999999999	0.22894495139999996	0.09182865899999998
 * 
 * M^k, k = 100
 * 0.34730228614268854	0.29727348665212705	0.0156459729816909	0.23380325378008956	0.10597500044340082
 * 0.31834922749893035	0.33018266356480425	0.01737803492446338	0.2292641497034507	0.10482592430834843
 * 0.32302976021652824	0.3252728289798031	0.017119622577884373	0.22970997053782088	0.1048678176879605
 * 0.312919459633818	0.30052612066039036	0.015817164245283705	0.2535624088714234	0.11717484658908153
 * 0.3136042246881892	0.3068782722057018	0.016151488010826408	0.24866454382345426	0.11470147127182528
 * 
 * M^k, k = 1000
 * 0.3260515161395407	0.30974894033256295	0.016302575806977	0.23866970981414415	0.10922725790674628
 * 0.3260515161395413	0.30974894033256367	0.016302575806977034	0.23866970981414337	0.10922725790674587
 * 0.3260515161395413	0.3097489403325636	0.01630257580697703	0.23866970981414354	0.10922725790674595
 * 0.3260515161395401	0.3097489403325643	0.016302575806977065	0.23866970981414376	0.1092272579067461
 * 0.32605151613954036	0.3097489403325642	0.016302575806977065	0.23866970981414373	0.10922725790674609
 * </pre>
 */
public class Solution3 {
	private static final Operation<Double> ADD = new DoubleAddOperation();
	private static final Operation<Double> MULT = new DoubleMultOperation();

	public static void main(String[] args) {
		Matrix<Double> m = new Matrix<Double>(new Double[][] {
			new Double[] {0.0, 0.95, 0.05, 0.0, 0.0},
			new Double[] {0.0, 0.0 , 0.0 , 0.7, 0.3},
			new Double[] {0.0, 0.0 , 0.0 , 0.0, 1.0},
			new Double[] {1.0, 0.0 , 0.0 , 0.0, 0.0},
			new Double[] {0.8, 0.0 , 0.0 , 0.2, 0.0}
		});
		
		for (int k = 1; k <= 1000; k *= 10) {
			System.out.println("M^k, k = " + k);
			System.out.println(m.exponentation(ADD, MULT, 0.0, k));
		}
	}

}
