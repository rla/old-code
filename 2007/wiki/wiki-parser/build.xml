<?xml version="1.0"?>

<project name="wiki-parser" default="jar">
	<property name="src" value="src" />
	<property name="build" value="build" />
	<property name="lib" value="../lib" />
	<property name="jar" value="wiki-parser.jar" />
	<property name="rep.jar" value="../lib/${jar}" />
	<property name="doc" value="doc" />
	<property name="doc.test.reports" value="${doc}/reports" />
	<property name="rules" value="../rules" />
	
	<property name="tokenizer.rules.location" value="${rules}/tokenizer.rules" />
	<property name="tokenizer.rules.classpath" value="ee/pri/rl/wiki/tokenizer/tokenizer.rules" />
	<property name="parser.rules.location" value="${rules}/parser.rules" />
	<property name="parser.rules.classpath" value="ee/pri/rl/wiki/parser/parser.rules" />
	<property name="help" value="ee/pri/rl/wiki/parser.help" />
	<property name="wiki.test" value="ee/pri/rl/wiki/tokenizer/test/test.wiki" />
	
	<path id="compile.classpath">
		<pathelement path="${build}" />
		<fileset dir="${lib}">
			<include name="*.jar" />
		</fileset>
	</path>
	
	<taskdef name="tokenizerCreator" classname="ee.pri.rl.tokenizer.support.ant.TokenizerCreator" classpathref="compile.classpath" />
	<taskdef name="parserCreator" classname="ee.pri.rl.parser.support.ant.ParserCreator" classpathref="compile.classpath" />
	<taskdef name="parserCompiler" classname="ee.pri.rl.parser.support.ant.ParserCompiler" classpathref="compile.classpath" />
	
	<path id="tests.path">
		<pathelement path="${build}" />
		<fileset dir="${lib}">
			<include name="*.jar" />
		</fileset>
	</path>
	
	<target name="rules" description="Transform parser rules into serialized form">
		<tokenizerCreator input="${tokenizer.rules.location}" output="${build}/${tokenizer.rules.classpath}.ser" />
		<parserCreator input="${parser.rules.location}" output="${build}/${parser.rules.classpath}.ser" top="nPage" />
	</target>
	
	<target name="compile-rules" depends="rules" description="Transform serialized parser rules into a program">
		<parserCompiler input="${build}/${parser.rules.classpath}.ser" output="${build}/${parser.rules.classpath}.comp"/>
	</target>
	
	<target name="compile" description="Compile the project">
		<mkdir dir="${build}" />
		<javac destdir="${build}" >
			<src path="${src}" />
			<classpath refid="compile.classpath" />
		</javac>
		<copy file="${tokenizer.rules.location}" tofile="${build}/${tokenizer.rules.classpath}" />
		<copy file="${parser.rules.location}" tofile="${build}/${parser.rules.classpath}" />
		<copy file="${src}/${help}" tofile="${build}/${help}" />
		<copy file="${src}/${wiki.test}" tofile="${build}/${wiki.test}" />
	</target>
	
	<target name="test" depends="compile, rules, compile-rules">
		<mkdir dir="${doc.test.reports}"/>
		<junit printsummary="yes" haltonfailure="yes">
			<classpath refid="tests.path"/>
			<formatter type="plain"/>
			<batchtest fork="yes" todir="${doc.test.reports}">
				<fileset dir="${src}">
					<include name="**/*Test.java"/>
				</fileset>
			</batchtest>
		</junit>
	</target>
	
	<target name="clean" description="Clean the project">
		<delete dir="${build}" />
		<delete file="${jar}" />
	</target>
	
	<target name="jar" depends="compile, test" description="Package the project into jar">
		<jar destfile="${jar}" basedir="${build}" />
	</target>
	
	<target name="copy-jar" description="Copy jar to upper project repository" depends="jar">
		<copy file="${jar}" tofile="${rep.jar}" />
	</target>

</project>